use ordnl;

#[test]
pub fn test_u16() {
    for (num, expected) in vec![
        // < 100
        (0u16, "0th"),
        (1u16, "1st"),
        (2u16, "2nd"),
        (3u16, "3rd"),
        (4u16, "4th"),
        (5u16, "5th"),
        (6u16, "6th"),
        (7u16, "7th"),
        (8u16, "8th"),
        (9u16, "9th"),
        (10u16, "10th"),
        (11u16, "11th"),
        (12u16, "12th"),
        (13u16, "13th"),
        (14u16, "14th"),
        (15u16, "15th"),
        (16u16, "16th"),
        (17u16, "17th"),
        (18u16, "18th"),
        (19u16, "19th"),
        (20u16, "20th"),
        (21u16, "21st"),
        (22u16, "22nd"),
        (23u16, "23rd"),
        (24u16, "24th"),
        (25u16, "25th"),
        (26u16, "26th"),
        (27u16, "27th"),
        (28u16, "28th"),
        (29u16, "29th"),
        // 100+
        (100u16, "100th"),
        (101u16, "101st"),
        (102u16, "102nd"),
        (103u16, "103rd"),
        (104u16, "104th"),
        (105u16, "105th"),
        (106u16, "106th"),
        (107u16, "107th"),
        (108u16, "108th"),
        (109u16, "109th"),
        (111u16, "111th"),
        (112u16, "112th"),
        (113u16, "113th"),
        (114u16, "114th"),
        (115u16, "115th"),
        (116u16, "116th"),
        (117u16, "117th"),
        (118u16, "118th"),
        (119u16, "119th"),
        (200u16, "200th"),
        (211u16, "211th"),
        (212u16, "212th"),
        (213u16, "213th"),
        (214u16, "214th"),
        (215u16, "215th"),
        (216u16, "216th"),
        (217u16, "217th"),
        (218u16, "218th"),
        (219u16, "219th"),
        // 1000+
        (1000u16, "1000th"),
        (1001u16, "1001st"),
        (1002u16, "1002nd"),
        (1003u16, "1003rd"),
        (1004u16, "1004th"),
        (1005u16, "1005th"),
        (1006u16, "1006th"),
        (1007u16, "1007th"),
        (1008u16, "1008th"),
        (1009u16, "1009th"),
        (1011u16, "1011th"),
        (1012u16, "1012th"),
        (1013u16, "1013th"),
        (1014u16, "1014th"),
        (1015u16, "1015th"),
        (1016u16, "1016th"),
        (1017u16, "1017th"),
        (1018u16, "1018th"),
        (1019u16, "1019th"),
        (1100u16, "1100th"),
        (1101u16, "1101st"),
        (1102u16, "1102nd"),
        (1103u16, "1103rd"),
        (1104u16, "1104th"),
        (1105u16, "1105th"),
        (1106u16, "1106th"),
        (1107u16, "1107th"),
        (1108u16, "1108th"),
        (1109u16, "1109th"),
        (1111u16, "1111th"),
        (1112u16, "1112th"),
        (1113u16, "1113th"),
        (1114u16, "1114th"),
        (1115u16, "1115th"),
        (1116u16, "1116th"),
        (1117u16, "1117th"),
        (1118u16, "1118th"),
        (1119u16, "1119th"),
        // 10,000+
        (10000u16, "10000th"),
        (10001u16, "10001st"),
        (10002u16, "10002nd"),
        (10003u16, "10003rd"),
        (10004u16, "10004th"),
        (10005u16, "10005th"),
        (10006u16, "10006th"),
        (10007u16, "10007th"),
        (10008u16, "10008th"),
        (10009u16, "10009th"),
        (10011u16, "10011th"),
        (10012u16, "10012th"),
        (10013u16, "10013th"),
        (10014u16, "10014th"),
        (10015u16, "10015th"),
        (10016u16, "10016th"),
        (10017u16, "10017th"),
        (10018u16, "10018th"),
        (10019u16, "10019th"),
        (10100u16, "10100th"),
        (10101u16, "10101st"),
        (10102u16, "10102nd"),
        (10103u16, "10103rd"),
        (10104u16, "10104th"),
        (10105u16, "10105th"),
        (10106u16, "10106th"),
        (10107u16, "10107th"),
        (10108u16, "10108th"),
        (10109u16, "10109th"),
        (10111u16, "10111th"),
        (10112u16, "10112th"),
        (10113u16, "10113th"),
        (10114u16, "10114th"),
        (10115u16, "10115th"),
        (10116u16, "10116th"),
        (10117u16, "10117th"),
        (10118u16, "10118th"),
        (10119u16, "10119th"),
    ] {
        assert_eq!(ordnl::of_u16(num), expected);
    }
}
