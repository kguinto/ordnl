use ordnl;

#[test]
fn test_u8() {
    for (num, expected) in vec![
        (0u8, "0th"),
        (1u8, "1st"),
        (2u8, "2nd"),
        (3u8, "3rd"),
        (4u8, "4th"),
        (5u8, "5th"),
        (6u8, "6th"),
        (7u8, "7th"),
        (8u8, "8th"),
        (9u8, "9th"),
        (10u8, "10th"),
        (11u8, "11th"),
        (12u8, "12th"),
        (13u8, "13th"),
        (14u8, "14th"),
        (15u8, "15th"),
        (16u8, "16th"),
        (17u8, "17th"),
        (18u8, "18th"),
        (19u8, "19th"),
        (20u8, "20th"),
        (21u8, "21st"),
        (22u8, "22nd"),
        (23u8, "23rd"),
        (24u8, "24th"),
        (25u8, "25th"),
        (26u8, "26th"),
        (27u8, "27th"),
        (28u8, "28th"),
        (29u8, "29th"),
        (100u8, "100th"),
        (101u8, "101st"),
        (102u8, "102nd"),
        (103u8, "103rd"),
        (104u8, "104th"),
        (105u8, "105th"),
        (106u8, "106th"),
        (107u8, "107th"),
        (108u8, "108th"),
        (109u8, "109th"),
        (111u8, "111th"),
        (112u8, "112th"),
        (113u8, "113th"),
        (114u8, "114th"),
        (115u8, "115th"),
        (116u8, "116th"),
        (117u8, "117th"),
        (118u8, "118th"),
        (119u8, "119th"),
        (200u8, "200th"),
        (211u8, "211th"),
        (212u8, "212th"),
        (213u8, "213th"),
        (214u8, "214th"),
        (215u8, "215th"),
        (216u8, "216th"),
        (217u8, "217th"),
        (218u8, "218th"),
        (219u8, "219th"),
    ] {
        assert_eq!(ordnl::of_u8(num), expected);
    }
}
