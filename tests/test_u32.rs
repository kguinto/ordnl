use ordnl;

#[test]
fn test_u32() {
    for (num, expected) in vec![
        // < 100
        (0u32, "0th"),
        (1u32, "1st"),
        (2u32, "2nd"),
        (3u32, "3rd"),
        (4u32, "4th"),
        (5u32, "5th"),
        (6u32, "6th"),
        (7u32, "7th"),
        (8u32, "8th"),
        (9u32, "9th"),
        (10u32, "10th"),
        (11u32, "11th"),
        (12u32, "12th"),
        (13u32, "13th"),
        (14u32, "14th"),
        (15u32, "15th"),
        (16u32, "16th"),
        (17u32, "17th"),
        (18u32, "18th"),
        (19u32, "19th"),
        (20u32, "20th"),
        (21u32, "21st"),
        (22u32, "22nd"),
        (23u32, "23rd"),
        (24u32, "24th"),
        (25u32, "25th"),
        (26u32, "26th"),
        (27u32, "27th"),
        (28u32, "28th"),
        (29u32, "29th"),
        // 100+
        (100u32, "100th"),
        (101u32, "101st"),
        (102u32, "102nd"),
        (103u32, "103rd"),
        (104u32, "104th"),
        (105u32, "105th"),
        (106u32, "106th"),
        (107u32, "107th"),
        (108u32, "108th"),
        (109u32, "109th"),
        (111u32, "111th"),
        (112u32, "112th"),
        (113u32, "113th"),
        (114u32, "114th"),
        (115u32, "115th"),
        (116u32, "116th"),
        (117u32, "117th"),
        (118u32, "118th"),
        (119u32, "119th"),
        (200u32, "200th"),
        (211u32, "211th"),
        (212u32, "212th"),
        (213u32, "213th"),
        (214u32, "214th"),
        (215u32, "215th"),
        (216u32, "216th"),
        (217u32, "217th"),
        (218u32, "218th"),
        (219u32, "219th"),
        // 1000+
        (1000u32, "1000th"),
        (1001u32, "1001st"),
        (1002u32, "1002nd"),
        (1003u32, "1003rd"),
        (1004u32, "1004th"),
        (1005u32, "1005th"),
        (1006u32, "1006th"),
        (1007u32, "1007th"),
        (1008u32, "1008th"),
        (1009u32, "1009th"),
        (1011u32, "1011th"),
        (1012u32, "1012th"),
        (1013u32, "1013th"),
        (1014u32, "1014th"),
        (1015u32, "1015th"),
        (1016u32, "1016th"),
        (1017u32, "1017th"),
        (1018u32, "1018th"),
        (1019u32, "1019th"),
        (1100u32, "1100th"),
        (1101u32, "1101st"),
        (1102u32, "1102nd"),
        (1103u32, "1103rd"),
        (1104u32, "1104th"),
        (1105u32, "1105th"),
        (1106u32, "1106th"),
        (1107u32, "1107th"),
        (1108u32, "1108th"),
        (1109u32, "1109th"),
        (1111u32, "1111th"),
        (1112u32, "1112th"),
        (1113u32, "1113th"),
        (1114u32, "1114th"),
        (1115u32, "1115th"),
        (1116u32, "1116th"),
        (1117u32, "1117th"),
        (1118u32, "1118th"),
        (1119u32, "1119th"),
        // 10,000+
        (10000u32, "10000th"),
        (10001u32, "10001st"),
        (10002u32, "10002nd"),
        (10003u32, "10003rd"),
        (10004u32, "10004th"),
        (10005u32, "10005th"),
        (10006u32, "10006th"),
        (10007u32, "10007th"),
        (10008u32, "10008th"),
        (10009u32, "10009th"),
        (10011u32, "10011th"),
        (10012u32, "10012th"),
        (10013u32, "10013th"),
        (10014u32, "10014th"),
        (10015u32, "10015th"),
        (10016u32, "10016th"),
        (10017u32, "10017th"),
        (10018u32, "10018th"),
        (10019u32, "10019th"),
        (10100u32, "10100th"),
        (10101u32, "10101st"),
        (10102u32, "10102nd"),
        (10103u32, "10103rd"),
        (10104u32, "10104th"),
        (10105u32, "10105th"),
        (10106u32, "10106th"),
        (10107u32, "10107th"),
        (10108u32, "10108th"),
        (10109u32, "10109th"),
        (10111u32, "10111th"),
        (10112u32, "10112th"),
        (10113u32, "10113th"),
        (10114u32, "10114th"),
        (10115u32, "10115th"),
        (10116u32, "10116th"),
        (10117u32, "10117th"),
        (10118u32, "10118th"),
        (10119u32, "10119th"),
        // 1,000,000,000+
        (1000000000u32, "1000000000th"),
        (1000000001u32, "1000000001st"),
        (1000000002u32, "1000000002nd"),
        (1000000003u32, "1000000003rd"),
        (1000000004u32, "1000000004th"),
        (1000000005u32, "1000000005th"),
        (1000000006u32, "1000000006th"),
        (1000000007u32, "1000000007th"),
        (1000000008u32, "1000000008th"),
        (1000000009u32, "1000000009th"),
        (1000000011u32, "1000000011th"),
        (1000000012u32, "1000000012th"),
        (1000000013u32, "1000000013th"),
        (1000000014u32, "1000000014th"),
        (1000000015u32, "1000000015th"),
        (1000000016u32, "1000000016th"),
        (1000000017u32, "1000000017th"),
        (1000000018u32, "1000000018th"),
        (1000000019u32, "1000000019th"),
        (1000000100u32, "1000000100th"),
        (1000000101u32, "1000000101st"),
        (1000000102u32, "1000000102nd"),
        (1000000103u32, "1000000103rd"),
        (1000000104u32, "1000000104th"),
        (1000000105u32, "1000000105th"),
        (1000000106u32, "1000000106th"),
        (1000000107u32, "1000000107th"),
        (1000000108u32, "1000000108th"),
        (1000000109u32, "1000000109th"),
        (1000000111u32, "1000000111th"),
        (1000000112u32, "1000000112th"),
        (1000000113u32, "1000000113th"),
        (1000000114u32, "1000000114th"),
        (1000000115u32, "1000000115th"),
        (1000000116u32, "1000000116th"),
        (1000000117u32, "1000000117th"),
        (1000000118u32, "1000000118th"),
        (1000000119u32, "1000000119th"),
    ] {
        assert_eq!(ordnl::of_u32(num), expected);
    }
}
